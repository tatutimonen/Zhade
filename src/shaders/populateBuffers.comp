#version 460 core
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shading_language_include : require
precision lowp float;
precision highp int;

#include "common_defs.h"

//------------------------------------------------------------------------

layout (
    local_size_x = WORK_GROUP_LOCAL_SIZE_X,
    local_size_y = WORK_GROUP_LOCAL_SIZE_Y,
    local_size_y = WORK_GROUP_LOCAL_SIZE_Z
) in;

//------------------------------------------------------------------------
// Inputs.

layout (binding = MESH_BINDING, std140) restrict readonly buffer MeshBlock {
    Mesh b_mesh[];
};

//------------------------------------------------------------------------
// Outputs.

layout (binding = INDIRECT_BINDING, std430) restrict writeonly buffer DrawIndirect {
    DrawElementsIndirectCommand b_cmd[];
};

layout (binding = DRAW_METADATA_BINDING, std430) restrict writeonly buffer DrawMeta {
    DrawMetadata b_meta[];
};

layout (binding = ATOMIC_COUNTER_BINDING) uniform atomic_uint drawCount;

//------------------------------------------------------------------------

void main()
{
    uint idx = atomicCounterIncrement(drawCount);

    b_cmd[idx].count = b_mesh[idx].numIndices;
    b_cmd[idx].instanceCount = 1;
    b_cmd[idx].firstIndex = b_mesh[idx].firstIndex;
    b_cmd[idx].baseVertex = b_mesh[idx].baseVertex;
    b_cmd[idx].baseInstance = 0;

    b_meta[idx].modelMatT = b_mesh[idx].modelMatT;
    b_meta[idx].normalMat = inverse(mat3(b_mesh[idx].modelMatT));
    b_meta[idx].textures = b_mesh[idx].textures;
}

//------------------------------------------------------------------------